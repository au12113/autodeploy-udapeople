version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            apk add --update py2-pip
            pip install --upgrade pip
            pip install awscli
            aws cloudformation delete-stack \
              --stack-name Backend-Udapeople-<<parameters.workflow>>
            aws cloudformation delete-stack \
              --stack-name Frontend-Udapeople-<<parameters.workflow>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow:
        type: string 
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=1
            if(( ${SUCCESS}==1 )); 
            then
              cd backend
              npm run migrations:revert
            fi
          when: on_fail
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend-testing
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend-testing
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend scaning
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend scaning
          command: |
            cd backend
            npm audit

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name Backend-Udapeople-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID} \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name Frontend-Udapeople-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID} \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            yum -y install tar gzip
            echo [web] > .circleci/ansible/inventory.txt
            aws cloudformation list-exports \
              --query "Exports[?Name=='BackendIP'].Value|[0]" >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: 302b3d21-bd30-4e72-8c9c-7b247c85ceac" \
              --request PUT --data $(cat .circleci/ansible/inventory.txt) https://api.memstash.io/values/BackendIP
      - destroy-environment:
          workflow: $CIRCLE_WORKFLOW_ID

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints:
            - '0d:dc:24:dc:32:c9:a7:85:1f:61:3d:22:de:ac:62:8a'
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add curl
            pip install cloudformation-cli-python-plugin
      - run:
          name: Configure server
          command: |
            curl -H "token: 302b3d21-bd30-4e72-8c9c-7b247c85ceac" --request GET https://api.memstash.io/values/BackendIP > .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow: $CIRCLE_WORKFLOW_ID

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            echo NODE_ENV=$NODE_ENV > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm install
            npm run migrations > migrations_log.txt
            cat migrations_log.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep "has been executed successfully" backend/migrations_logs.txt
            then curl -H "Content-Type: text/plain" -H "token: 302b3d21-bd30-4e72-8c9c-7b247c85ceac" --request PUT --data "1" https://api.memstash.io/values/BackendIP
            fi
      - revert-migrations:
          workflow: $CIRCLE_WORKFLOW_ID

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm i
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
      - destroy-environment:
          workflow: $CIRCLE_WORKFLOW_ID
      - revert-migrations:
          workflow: $CIRCLE_WORKFLOW_ID

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints:
            - '0d:dc:24:dc:32:c9:a7:85:1f:61:3d:22:de:ac:62:8a'
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add curl
            pip install cloudformation-cli-python-plugin
      - run:
          name: Deploy backend
          command: |
            curl -H "token: 302b3d21-bd30-4e72-8c9c-7b247c85ceac" --request GET https://api.memstash.io/values/BackendIP
      - destroy-environment:
          workflow: $CIRCLE_WORKFLOW_ID
      - revert-migrations:
          workflow: $CIRCLE_WORKFLOW_ID

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add tar gzip curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=`cat .circleci/ansible/inventory.txt | head -2 | tail -1`
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            curl "http://${BACKNED_IP}:3030/api/status"
      - destroy-environment:
          workflow: $CIRCLE_WORKFLOW_ID
      - revert-migrations:
          workflow: $CIRCLE_WORKFLOW_ID

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      - destroy-environment:
          workflow: $CIRCLE_WORKFLOW_ID
      - revert-migrations:
          workflow: $CIRCLE_WORKFLOW_ID

  cleanup:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              export OldWorkflowID="the id here"
              export STACKS=[] #put the list of stacks here
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
              fi
              

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [scan-frontend, scan-backend]
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]